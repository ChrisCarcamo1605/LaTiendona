/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package org.example.vista;

import jakarta.persistence.EntityManager;
import java.awt.BorderLayout;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import org.example.dao.ProductoDAO;
import org.example.dao.TipoProductoDAO;
import org.example.modelo.Producto;
import org.example.modelo.TipoProducto;
import org.example.utils.JPAUtils;

/**
 *
 * @author vaneg
 */
public class CRUD extends javax.swing.JFrame {

    AgregarTipoPane tp = new AgregarTipoPane();
    AgregarProductoPane pr = new AgregarProductoPane();

    public CRUD() {
        initComponents();

        tablaPanel.setLayout(new BorderLayout());
        tablaPanel.add(tp, BorderLayout.CENTER);

        tablaPanel.setLayout(new BorderLayout());
        tablaPanel.add(pr, BorderLayout.CENTER);

        // Actualizar la vista
        cargarDatos();
        tablaPanel.revalidate();
        tablaPanel.repaint();

    }

    public void cambiarTabla() {
        String tabla = TablaComboBox.getSelectedItem().toString();
        tablaPanel.removeAll(); // Limpiar el panel antes de agregar uno nuevo

        if (tabla.equals("TipoProducto")) {

            tablaPanel.add(tp, BorderLayout.CENTER);

        } else if (tabla.equals("Producto")) {

            tablaPanel.add(pr, BorderLayout.CENTER);
        }

        // Actualizar la vista
        tablaPanel.revalidate();
        tablaPanel.repaint();
        cargarDatos();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        agregarPane = new javax.swing.JPanel();
        bg = new javax.swing.JPanel();
        menuCRUD = new javax.swing.JPanel();
        TablaComboBox = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        tablaPanel = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        actualizarBtn = new javax.swing.JButton();
        borrarBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaProductos = new javax.swing.JTable();
        agregarBtn = new javax.swing.JButton();

        agregarPane.setBackground(new java.awt.Color(255, 255, 255));
        agregarPane.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        bg.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        menuCRUD.setBackground(new java.awt.Color(102, 0, 51));
        menuCRUD.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        TablaComboBox.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        TablaComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Producto", "TipoProducto" }));
        TablaComboBox.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, null, new java.awt.Color(153, 0, 51), null, new java.awt.Color(255, 51, 51)));
        TablaComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                TablaComboBoxItemStateChanged(evt);
            }
        });
        TablaComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TablaComboBoxActionPerformed(evt);
            }
        });
        menuCRUD.add(TablaComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 120, 160, -1));

        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/LaTiendona - copia.png"))); // NOI18N
        menuCRUD.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 20, -1, 76));

        tablaPanel.setBackground(new java.awt.Color(102, 0, 51));
        tablaPanel.addContainerListener(new java.awt.event.ContainerAdapter() {
            public void componentAdded(java.awt.event.ContainerEvent evt) {
                tablaPanelComponentAdded(evt);
            }
        });

        javax.swing.GroupLayout tablaPanelLayout = new javax.swing.GroupLayout(tablaPanel);
        tablaPanel.setLayout(tablaPanelLayout);
        tablaPanelLayout.setHorizontalGroup(
            tablaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 320, Short.MAX_VALUE)
        );
        tablaPanelLayout.setVerticalGroup(
            tablaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 280, Short.MAX_VALUE)
        );

        menuCRUD.add(tablaPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 160, 320, 280));

        jButton1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButton1.setText("Salir");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        menuCRUD.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 450, 110, 30));

        bg.add(menuCRUD, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 320, 490));

        actualizarBtn.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        actualizarBtn.setText("ACTUALIZAR");
        actualizarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                actualizarBtnActionPerformed(evt);
            }
        });
        bg.add(actualizarBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 440, 130, 40));

        borrarBtn.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        borrarBtn.setText("BORRAR");
        borrarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                borrarBtnActionPerformed(evt);
            }
        });
        bg.add(borrarBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 440, 130, 40));

        tablaProductos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "ID", "NOMBRE", "DESCRIPCION", "TIPO", "PRECIO"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Long.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tablaProductos);
        if (tablaProductos.getColumnModel().getColumnCount() > 0) {
            tablaProductos.getColumnModel().getColumn(0).setResizable(false);
            tablaProductos.getColumnModel().getColumn(1).setResizable(false);
            tablaProductos.getColumnModel().getColumn(2).setResizable(false);
            tablaProductos.getColumnModel().getColumn(3).setResizable(false);
            tablaProductos.getColumnModel().getColumn(4).setResizable(false);
        }

        bg.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 70, 580, 360));

        agregarBtn.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        agregarBtn.setText("GUARDAR");
        agregarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                agregarBtnActionPerformed(evt);
            }
        });
        bg.add(agregarBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 440, 130, 40));

        getContentPane().add(bg, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 940, 490));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void TablaComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_TablaComboBoxItemStateChanged

        cambiarTabla();
        pr.cargarTipos();
    }//GEN-LAST:event_TablaComboBoxItemStateChanged

    private void tablaPanelComponentAdded(java.awt.event.ContainerEvent evt) {//GEN-FIRST:event_tablaPanelComponentAdded

    }//GEN-LAST:event_tablaPanelComponentAdded

    private void borrarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_borrarBtnActionPerformed
        String tabla = TablaComboBox.getSelectedItem().toString();
        EntityManager em = JPAUtils.getEntityManager();

        DefaultTableModel Jtabla = (DefaultTableModel) tablaProductos.getModel();
        int fila = tablaProductos.getSelectedRow();

        if (fila >= 0) {
            Long idProd = (Long) tablaProductos.getValueAt(fila, 0);

            int confirmacion = JOptionPane.showConfirmDialog(this,
                    "¿Estás seguro de que deseas eliminarlo?",
                    "Confirmar Eliminación",
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.QUESTION_MESSAGE);

            try {
                if (confirmacion == JOptionPane.YES_OPTION) {
                    if (tabla.equals("Producto")) {
                        ProductoDAO pro = new ProductoDAO(em);
                        pro.eliminar(idProd);

                    }
                    if (tabla.equals("TipoProducto")) {
                        TipoProductoDAO pro = new TipoProductoDAO(em);
                        pro.eliminar(idProd);
                    }
                }
            } catch (Exception e) {
                e.printStackTrace();
            } finally {
                cargarDatos();
            }
        } else {
            JOptionPane.showMessageDialog(this, "Seleccione una Fila");
        }


    }//GEN-LAST:event_borrarBtnActionPerformed

    private void agregarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_agregarBtnActionPerformed

        String tabla = TablaComboBox.getSelectedItem().toString();
        EntityManager em = JPAUtils.getEntityManager();
        
        try {
            em.getTransaction().begin();

            if (tabla.equals("Producto")) {
                ProductoDAO proDAO = new ProductoDAO(em);

                String nombre = pr.nombreTxt1.getText();
                String descripcion = pr.descripcionTxt1.getText();
                Double precio = Double.valueOf(pr.precioTxt.getText());
                TipoProducto tipoProducto = (TipoProducto) pr.TipoProductoComboBox1.getSelectedItem();
                Producto nuevoProducto = new Producto(nombre, descripcion, precio, tipoProducto);
                proDAO.guardar(nuevoProducto);

            } else if (tabla.equals("TipoProducto")) {
                TipoProductoDAO tproDAO = new TipoProductoDAO(em);

                String nombreTipo = tp.nombreTipoTxt1.getText();
                System.out.println("==========================================================================================================================" + nombreTipo);

                TipoProducto nuevoTipoProducto = new TipoProducto(nombreTipo);
                tproDAO.guardar(nuevoTipoProducto);
            }

            em.getTransaction().commit();

            // Actualiza la tabla
            cargarDatos();

            // Limpiar campos
            pr.nombreTxt1.setText("");
            tp.nombreTipoTxt1.setText("");

            pr.descripcionTxt1.setText("");
            pr.precioTxt.setText("");

        } catch (Exception e) {
            if (em.getTransaction().isActive()) {
                em.getTransaction().rollback();
            }
            e.printStackTrace();
        } finally {
            em.close();
        }


    }//GEN-LAST:event_agregarBtnActionPerformed

    private void TablaComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TablaComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TablaComboBoxActionPerformed

    private void actualizarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_actualizarBtnActionPerformed
        String tabla = TablaComboBox.getSelectedItem().toString();
        EntityManager em = JPAUtils.getEntityManager();
        DefaultTableModel Jtabla = (DefaultTableModel) tablaProductos.getModel();
        int fila = tablaProductos.getSelectedRow();
 
        if (fila >= 0) {
            Long idProd = (Long) tablaProductos.getValueAt(fila, 0);
            
            int confirmacion = JOptionPane.showConfirmDialog(this,
                    "¿Estás seguro de que deseas actualizar este registro?",
                    "Confirmar Actualización",
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.QUESTION_MESSAGE);

            try {
                if (confirmacion == JOptionPane.YES_OPTION) {
                    em.getTransaction().begin();
                    if (tabla.equals("Producto")) {
                        ProductoDAO pro = new ProductoDAO(em);
                        // Obtener nuevos valores (por ejemplo, de campos de texto)
                        String nuevoNombre = (String) tablaProductos.getValueAt(fila, 1);
                        String nuevaDesc = (String) tablaProductos.getValueAt(fila, 2);
                        TipoProducto nuevoTip = (TipoProducto) tablaProductos.getValueAt(fila, 3);
                        Double nuevoPre = (Double) tablaProductos.getValueAt(fila, 4);

                        Producto producto = pro.buscarPorId(idProd);
                        if (producto != null) {
                            producto.setNombre(nuevoNombre);
                            producto.setDescripcion(nuevaDesc);
                            producto.setTipo(nuevoTip);
                            producto.setPrecio(nuevoPre);
                            pro.actualizar(producto);
                        }
                    }

                    if(tabla.equals("TipoProducto")) {
                        TipoProductoDAO tpro = new TipoProductoDAO(em);
                        
                        String nuevoNombreTipo = (String) tablaProductos.getValueAt(fila, 1);

                        TipoProducto tipoProducto = tpro.buscarPorId(idProd);
                        if (tipoProducto != null) {
                            tipoProducto.setNombre(nuevoNombreTipo);
                            tpro.actualizar(tipoProducto); 
                        }
                    }

                    em.getTransaction().commit();
                    JOptionPane.showMessageDialog(this, "Registro actualizado con éxito");
                }
            } catch (Exception e) {
                em.getTransaction().rollback();
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, "Error al actualizar el registro: " + e.getMessage());
            } finally {
                cargarDatos(); 
                em.close(); 
            }
        } else {
            JOptionPane.showMessageDialog(this, "Seleccione una fila");
        }


    }//GEN-LAST:event_actualizarBtnActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        this.setVisible(false);        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CRUD.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CRUD.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CRUD.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CRUD.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CRUD().setVisible(true);
            }
        });
    }

    public void cargarDatos() {
        String tabla = TablaComboBox.getSelectedItem().toString();
        EntityManager em = JPAUtils.getEntityManager();
        List<?> productos = new ArrayList<>();

        if (tabla.equals("Producto")) {
            ProductoDAO pr = new ProductoDAO(em);
            productos = pr.consultaTodos();
        } else {
            TipoProductoDAO pr = new TipoProductoDAO(em);
            productos = pr.consultaTodos();
        }

        JTable tb = tablaProductos;

        try {
            DefaultTableModel model = (DefaultTableModel) tb.getModel();
            model.setRowCount(0);

            if (tabla.equals("Producto")) {
                for (Producto producto : (List<Producto>) productos) {
                    Object[] rowData = {producto.getId(), producto.getNombre(), producto.getDescripcion(), producto.getTipo(), producto.getPrecio()};
                    model.addRow(rowData);
                }
                System.out.println(productos.size());
            }
            if (tabla.equals("TipoProducto")) {
                for (TipoProducto producto : (List<TipoProducto>) productos) {
                    Object[] rowData = {producto.getId(), producto.getNombre()};
                    model.addRow(rowData);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            em.close();
        }

    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> TablaComboBox;
    private javax.swing.JButton actualizarBtn;
    private javax.swing.JButton agregarBtn;
    private javax.swing.JPanel agregarPane;
    private javax.swing.JPanel bg;
    private javax.swing.JButton borrarBtn;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel menuCRUD;
    private javax.swing.JPanel tablaPanel;
    private javax.swing.JTable tablaProductos;
    // End of variables declaration//GEN-END:variables
}
